/**
 * Utilit√°rios para gerenciar dados do usu√°rio no localStorage
 */

export interface UserData {
  _id?: string;
  id?: string;
  email?: string;
  firstName?: string;
  lastName?: string;
  role?: string;
  [key: string]: any;
}

/**
 * Obt√©m os dados do usu√°rio do localStorage
 */
export function getUserData(): UserData | null {
  try {
    const userDataStr = localStorage.getItem('labadmin_user');
    if (!userDataStr) {
      console.warn('‚ö†Ô∏è Dados do usu√°rio n√£o encontrados no localStorage');
      return null;
    }

    const userData = JSON.parse(userDataStr);
    console.log('üìã Dados do usu√°rio carregados:', userData);
    return userData;
  } catch (error) {
    console.error('‚ùå Erro ao analisar dados do usu√°rio:', error);
    return null;
  }
}

/**
 * Obt√©m o ID do usu√°rio de forma robusta
 */
export function getUserId(): string | null {
  const userData = getUserData();
  if (!userData) {
    console.warn('‚ö†Ô∏è Dados do usu√°rio n√£o encontrados');
    return null;
  }

  console.log('üîç Estrutura completa dos dados do usu√°rio:', JSON.stringify(userData, null, 2));

  // Tenta diferentes campos que podem conter o ID
  const userId = userData._id || userData.id || userData.userId;
  
  if (!userId) {
    console.warn('‚ö†Ô∏è ID do usu√°rio n√£o encontrado nos dados. Campos dispon√≠veis:', Object.keys(userData));
    console.warn('‚ö†Ô∏è Dados completos:', userData);
    
    // Tenta encontrar qualquer campo que pare√ßa ser um ID
    const possibleIdFields = Object.keys(userData).filter(key => 
      key.toLowerCase().includes('id') || 
      (typeof userData[key] === 'string' && userData[key].length === 24) // ObjectId do MongoDB
    );
    
    if (possibleIdFields.length > 0) {
      console.log('üîç Poss√≠veis campos de ID encontrados:', possibleIdFields);
      const firstPossibleId = userData[possibleIdFields[0]];
      console.log('üÜî Usando campo alternativo:', possibleIdFields[0], '=', firstPossibleId);
      return firstPossibleId;
    }
    
    return null;
  }

  console.log('‚úÖ ID do usu√°rio obtido:', userId);
  return userId;
}

/**
 * Verifica se o usu√°rio est√° autenticado
 */
export function isUserAuthenticated(): boolean {
  const token = localStorage.getItem('labadmin_token');
  const userData = getUserData();
  
  const isAuthenticated = !!(token && userData);
  console.log('üîê Status de autentica√ß√£o:', isAuthenticated);
  
  return isAuthenticated;
}

/**
 * Obt√©m o token de autentica√ß√£o
 */
export function getAuthToken(): string | null {
  return localStorage.getItem('labadmin_token');
}

/**
 * Obt√©m informa√ß√µes b√°sicas do usu√°rio para logs
 */
export function getUserInfo(): string {
  const userData = getUserData();
  if (!userData) return 'Usu√°rio n√£o identificado';
  
  const name = userData.firstName && userData.lastName 
    ? `${userData.firstName} ${userData.lastName}`
    : userData.email || 'Usu√°rio';
    
  return `${name} (${userData.role || 'sem role'})`;
}

/**
 * Limpa dados do usu√°rio (logout)
 */
export function clearUserData(): void {
  localStorage.removeItem('labadmin_user');
  localStorage.removeItem('labadmin_token');
  localStorage.removeItem('labadmin_permissions');
  console.log('üö™ Dados do usu√°rio limpos (logout)');
}
